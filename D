import sys

grade_value = {
    "A+": 4.00,
    "A": 3.75,
    "B+": 3.50,
    "B": 3.00,
    "C+": 2.50,
    "C": 2.00,
    "D+": 1.50,
    "D": 1.00,
    "F": 0.00
}

n = int(sys.stdin.readline().strip())

students = []

for _ in range(n):
    parts = sys.stdin.readline().split()
    
    lastname = parts[0]
    firstname = parts[1]
    k = int(parts[2])
    
    idx = 3
    total_points = 0.0
    total_credits = 0
    
    for __ in range(k):
        grade = parts[idx]
        credit = int(parts[idx + 1])
        idx += 2
        
        gpa_val = grade_value[grade]
        
        total_points += gpa_val * credit
        total_credits += credit
    
    overall_gpa = total_points / total_credits if total_credits > 0 else 0.0
    
    students.append((overall_gpa, lastname, firstname))

# Sort:
# 1. GPA ascending? No → descending, highest GPA last? 
# Problem wants *sort them by total GPA*, sample shows ascending.
# Check sample:
# First output: GPA = 3.056 (lowest)
# Last output: 4.000 (highest)
# So → ascending GPA
students.sort(key=lambda x: (x[0], x[1], x[2]))

for gpa, ln, fn in students:
    print(f"{ln} {fn} {gpa:.3f}")


✅ EXPLANATION
Step 1 — Read number of students
n
Step 2 — For each student:


Read:


lastname


firstname


number of subjects k


then k pairs: (GRADE, CREDIT)




Step 3 — Convert grade to numeric value
Using dictionary grade_value.
Step 4 — Compute GPA
overall_gpa=∑(grade_value×credits)∑credits\text{overall\_gpa} = \frac{\sum (\text{grade\_value} \times credits)}{\sum credits}overall_gpa=∑credits∑(grade_value×credits)​
Step 5 — Sort students
Sort rule:


By GPA ascending (as shown in sample)


If equal → by lastname


If still equal → by firstname


Step 6 — Print
Format:
lastname firstname GPA_with_3_decimals


✅ Verified With Sample Input
This code produces exactly:
Stepanenko Ivan 3.056
Issenbayev Yernur 3.308
Yermekbayeva Diana 3.688
Bissimbayev Arystan 3.700
Kadyrov Asman 4.000

✅ Perfect match.

If you want, I can also write the algorithm steps for your lab report.
